/*
* generated by Xtext
*/

package org.graphstream.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class DGSGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dgs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeaderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeaderHeaderParserRuleCall_0_0 = (RuleCall)cHeaderAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cEventAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cEventEventParserRuleCall_1_0_0 = (RuleCall)cEventAssignment_1_0.eContents().get(0);
		private final Assignment cCommentAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cCommentCOMMENTTerminalRuleCall_1_1_0 = (RuleCall)cCommentAssignment_1_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		//Dgs:
		//	header=Header (event+=Event | comment+=COMMENT | EOL)*;
		public ParserRule getRule() { return rule; }

		//header=Header (event+=Event | comment+=COMMENT | EOL)*
		public Group getGroup() { return cGroup; }

		//header=Header
		public Assignment getHeaderAssignment_0() { return cHeaderAssignment_0; }

		//Header
		public RuleCall getHeaderHeaderParserRuleCall_0_0() { return cHeaderHeaderParserRuleCall_0_0; }

		//(event+=Event | comment+=COMMENT | EOL)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//event+=Event
		public Assignment getEventAssignment_1_0() { return cEventAssignment_1_0; }

		//Event
		public RuleCall getEventEventParserRuleCall_1_0_0() { return cEventEventParserRuleCall_1_0_0; }

		//comment+=COMMENT
		public Assignment getCommentAssignment_1_1() { return cCommentAssignment_1_1; }

		//COMMENT
		public RuleCall getCommentCOMMENTTerminalRuleCall_1_1_0() { return cCommentCOMMENTTerminalRuleCall_1_1_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_1_2() { return cEOLTerminalRuleCall_1_2; }
	}

	public class HeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Header");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMagicAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMagicMAGICTerminalRuleCall_0_0 = (RuleCall)cMagicAssignment_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cNumberOfStepsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNumberOfStepsINTTerminalRuleCall_3_0 = (RuleCall)cNumberOfStepsAssignment_3.eContents().get(0);
		private final Assignment cNumberOfEventsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNumberOfEventsINTTerminalRuleCall_4_0 = (RuleCall)cNumberOfEventsAssignment_4.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Header:
		//	magic=MAGIC EOL name=Id numberOfSteps=INT numberOfEvents=INT EOL;
		public ParserRule getRule() { return rule; }

		//magic=MAGIC EOL name=Id numberOfSteps=INT numberOfEvents=INT EOL
		public Group getGroup() { return cGroup; }

		//magic=MAGIC
		public Assignment getMagicAssignment_0() { return cMagicAssignment_0; }

		//MAGIC
		public RuleCall getMagicMAGICTerminalRuleCall_0_0() { return cMagicMAGICTerminalRuleCall_0_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }

		//name=Id
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Id
		public RuleCall getNameIdParserRuleCall_2_0() { return cNameIdParserRuleCall_2_0; }

		//numberOfSteps=INT
		public Assignment getNumberOfStepsAssignment_3() { return cNumberOfStepsAssignment_3; }

		//INT
		public RuleCall getNumberOfStepsINTTerminalRuleCall_3_0() { return cNumberOfStepsINTTerminalRuleCall_3_0; }

		//numberOfEvents=INT
		public Assignment getNumberOfEventsAssignment_4() { return cNumberOfEventsAssignment_4; }

		//INT
		public RuleCall getNumberOfEventsINTTerminalRuleCall_4_0() { return cNumberOfEventsINTTerminalRuleCall_4_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_5() { return cEOLTerminalRuleCall_5; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cAnAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cAnAnParserRuleCall_0_0_0 = (RuleCall)cAnAssignment_0_0.eContents().get(0);
		private final Assignment cCnAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cCnCnParserRuleCall_0_1_0 = (RuleCall)cCnAssignment_0_1.eContents().get(0);
		private final Assignment cDnAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cDnDnParserRuleCall_0_2_0 = (RuleCall)cDnAssignment_0_2.eContents().get(0);
		private final Assignment cAeAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cAeAeParserRuleCall_0_3_0 = (RuleCall)cAeAssignment_0_3.eContents().get(0);
		private final Assignment cCeAssignment_0_4 = (Assignment)cAlternatives_0.eContents().get(4);
		private final RuleCall cCeCeParserRuleCall_0_4_0 = (RuleCall)cCeAssignment_0_4.eContents().get(0);
		private final Assignment cDeAssignment_0_5 = (Assignment)cAlternatives_0.eContents().get(5);
		private final RuleCall cDeDeParserRuleCall_0_5_0 = (RuleCall)cDeAssignment_0_5.eContents().get(0);
		private final Assignment cCgAssignment_0_6 = (Assignment)cAlternatives_0.eContents().get(6);
		private final RuleCall cCgCgParserRuleCall_0_6_0 = (RuleCall)cCgAssignment_0_6.eContents().get(0);
		private final Assignment cStAssignment_0_7 = (Assignment)cAlternatives_0.eContents().get(7);
		private final RuleCall cStStParserRuleCall_0_7_0 = (RuleCall)cStAssignment_0_7.eContents().get(0);
		private final Assignment cClAssignment_0_8 = (Assignment)cAlternatives_0.eContents().get(8);
		private final RuleCall cClClTerminalRuleCall_0_8_0 = (RuleCall)cClAssignment_0_8.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cCommentAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cCommentCOMMENTTerminalRuleCall_1_0_0 = (RuleCall)cCommentAssignment_1_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//Event:
		//	(an=An | cn=Cn | dn=Dn | ae=Ae | ce=Ce | de=De | cg=Cg | st=St | cl=Cl) (comment=COMMENT | EOL);
		public ParserRule getRule() { return rule; }

		//(an=An | cn=Cn | dn=Dn | ae=Ae | ce=Ce | de=De | cg=Cg | st=St | cl=Cl) (comment=COMMENT | EOL)
		public Group getGroup() { return cGroup; }

		//an=An | cn=Cn | dn=Dn | ae=Ae | ce=Ce | de=De | cg=Cg | st=St | cl=Cl
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//an=An
		public Assignment getAnAssignment_0_0() { return cAnAssignment_0_0; }

		//An
		public RuleCall getAnAnParserRuleCall_0_0_0() { return cAnAnParserRuleCall_0_0_0; }

		//cn=Cn
		public Assignment getCnAssignment_0_1() { return cCnAssignment_0_1; }

		//Cn
		public RuleCall getCnCnParserRuleCall_0_1_0() { return cCnCnParserRuleCall_0_1_0; }

		//dn=Dn
		public Assignment getDnAssignment_0_2() { return cDnAssignment_0_2; }

		//Dn
		public RuleCall getDnDnParserRuleCall_0_2_0() { return cDnDnParserRuleCall_0_2_0; }

		//ae=Ae
		public Assignment getAeAssignment_0_3() { return cAeAssignment_0_3; }

		//Ae
		public RuleCall getAeAeParserRuleCall_0_3_0() { return cAeAeParserRuleCall_0_3_0; }

		//ce=Ce
		public Assignment getCeAssignment_0_4() { return cCeAssignment_0_4; }

		//Ce
		public RuleCall getCeCeParserRuleCall_0_4_0() { return cCeCeParserRuleCall_0_4_0; }

		//de=De
		public Assignment getDeAssignment_0_5() { return cDeAssignment_0_5; }

		//De
		public RuleCall getDeDeParserRuleCall_0_5_0() { return cDeDeParserRuleCall_0_5_0; }

		//cg=Cg
		public Assignment getCgAssignment_0_6() { return cCgAssignment_0_6; }

		//Cg
		public RuleCall getCgCgParserRuleCall_0_6_0() { return cCgCgParserRuleCall_0_6_0; }

		//st=St
		public Assignment getStAssignment_0_7() { return cStAssignment_0_7; }

		//St
		public RuleCall getStStParserRuleCall_0_7_0() { return cStStParserRuleCall_0_7_0; }

		//cl=Cl
		public Assignment getClAssignment_0_8() { return cClAssignment_0_8; }

		//Cl
		public RuleCall getClClTerminalRuleCall_0_8_0() { return cClClTerminalRuleCall_0_8_0; }

		//comment=COMMENT | EOL
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//comment=COMMENT
		public Assignment getCommentAssignment_1_0() { return cCommentAssignment_1_0; }

		//COMMENT
		public RuleCall getCommentCOMMENTTerminalRuleCall_1_0_0() { return cCommentCOMMENTTerminalRuleCall_1_0_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_1_1() { return cEOLTerminalRuleCall_1_1; }
	}

	public class AnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "An");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdNodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdNodeIdParserRuleCall_1_0 = (RuleCall)cIdNodeAssignment_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributesParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		
		//An:
		//	"an" idNode=Id attributes=Attributes;
		public ParserRule getRule() { return rule; }

		//"an" idNode=Id attributes=Attributes
		public Group getGroup() { return cGroup; }

		//"an"
		public Keyword getAnKeyword_0() { return cAnKeyword_0; }

		//idNode=Id
		public Assignment getIdNodeAssignment_1() { return cIdNodeAssignment_1; }

		//Id
		public RuleCall getIdNodeIdParserRuleCall_1_0() { return cIdNodeIdParserRuleCall_1_0; }

		//attributes=Attributes
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//Attributes
		public RuleCall getAttributesAttributesParserRuleCall_2_0() { return cAttributesAttributesParserRuleCall_2_0; }
	}

	public class CnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdNodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdNodeIdParserRuleCall_1_0 = (RuleCall)cIdNodeAssignment_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributesParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		
		//Cn:
		//	"cn" idNode=Id attributes=Attributes;
		public ParserRule getRule() { return rule; }

		//"cn" idNode=Id attributes=Attributes
		public Group getGroup() { return cGroup; }

		//"cn"
		public Keyword getCnKeyword_0() { return cCnKeyword_0; }

		//idNode=Id
		public Assignment getIdNodeAssignment_1() { return cIdNodeAssignment_1; }

		//Id
		public RuleCall getIdNodeIdParserRuleCall_1_0() { return cIdNodeIdParserRuleCall_1_0; }

		//attributes=Attributes
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//Attributes
		public RuleCall getAttributesAttributesParserRuleCall_2_0() { return cAttributesAttributesParserRuleCall_2_0; }
	}

	public class DnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdNodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdNodeIdParserRuleCall_1_0 = (RuleCall)cIdNodeAssignment_1.eContents().get(0);
		
		//Dn:
		//	"dn" idNode=Id;
		public ParserRule getRule() { return rule; }

		//"dn" idNode=Id
		public Group getGroup() { return cGroup; }

		//"dn"
		public Keyword getDnKeyword_0() { return cDnKeyword_0; }

		//idNode=Id
		public Assignment getIdNodeAssignment_1() { return cIdNodeAssignment_1; }

		//Id
		public RuleCall getIdNodeIdParserRuleCall_1_0() { return cIdNodeIdParserRuleCall_1_0; }
	}

	public class AeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ae");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdEdgeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdEdgeIdParserRuleCall_1_0 = (RuleCall)cIdEdgeAssignment_1.eContents().get(0);
		private final Assignment cIdNode1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdNode1IdParserRuleCall_2_0 = (RuleCall)cIdNode1Assignment_2.eContents().get(0);
		private final Assignment cDirectionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDirectionDIRECTIONTerminalRuleCall_3_0 = (RuleCall)cDirectionAssignment_3.eContents().get(0);
		private final Assignment cIdNode2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdNode2IdParserRuleCall_4_0 = (RuleCall)cIdNode2Assignment_4.eContents().get(0);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesAttributesParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		
		//Ae:
		//	"ae" idEdge=Id idNode1=Id direction=DIRECTION? idNode2=Id attributes=Attributes;
		public ParserRule getRule() { return rule; }

		//"ae" idEdge=Id idNode1=Id direction=DIRECTION? idNode2=Id attributes=Attributes
		public Group getGroup() { return cGroup; }

		//"ae"
		public Keyword getAeKeyword_0() { return cAeKeyword_0; }

		//idEdge=Id
		public Assignment getIdEdgeAssignment_1() { return cIdEdgeAssignment_1; }

		//Id
		public RuleCall getIdEdgeIdParserRuleCall_1_0() { return cIdEdgeIdParserRuleCall_1_0; }

		//idNode1=Id
		public Assignment getIdNode1Assignment_2() { return cIdNode1Assignment_2; }

		//Id
		public RuleCall getIdNode1IdParserRuleCall_2_0() { return cIdNode1IdParserRuleCall_2_0; }

		//direction=DIRECTION?
		public Assignment getDirectionAssignment_3() { return cDirectionAssignment_3; }

		//DIRECTION
		public RuleCall getDirectionDIRECTIONTerminalRuleCall_3_0() { return cDirectionDIRECTIONTerminalRuleCall_3_0; }

		//idNode2=Id
		public Assignment getIdNode2Assignment_4() { return cIdNode2Assignment_4; }

		//Id
		public RuleCall getIdNode2IdParserRuleCall_4_0() { return cIdNode2IdParserRuleCall_4_0; }

		//attributes=Attributes
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }

		//Attributes
		public RuleCall getAttributesAttributesParserRuleCall_5_0() { return cAttributesAttributesParserRuleCall_5_0; }
	}

	public class CeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ce");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdEdgeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdEdgeIdParserRuleCall_1_0 = (RuleCall)cIdEdgeAssignment_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributesParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		
		//Ce:
		//	"ce" idEdge=Id attributes=Attributes;
		public ParserRule getRule() { return rule; }

		//"ce" idEdge=Id attributes=Attributes
		public Group getGroup() { return cGroup; }

		//"ce"
		public Keyword getCeKeyword_0() { return cCeKeyword_0; }

		//idEdge=Id
		public Assignment getIdEdgeAssignment_1() { return cIdEdgeAssignment_1; }

		//Id
		public RuleCall getIdEdgeIdParserRuleCall_1_0() { return cIdEdgeIdParserRuleCall_1_0; }

		//attributes=Attributes
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//Attributes
		public RuleCall getAttributesAttributesParserRuleCall_2_0() { return cAttributesAttributesParserRuleCall_2_0; }
	}

	public class DeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "De");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdEdgeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdEdgeIdParserRuleCall_1_0 = (RuleCall)cIdEdgeAssignment_1.eContents().get(0);
		
		//De:
		//	"de" idEdge=Id;
		public ParserRule getRule() { return rule; }

		//"de" idEdge=Id
		public Group getGroup() { return cGroup; }

		//"de"
		public Keyword getDeKeyword_0() { return cDeKeyword_0; }

		//idEdge=Id
		public Assignment getIdEdgeAssignment_1() { return cIdEdgeAssignment_1; }

		//Id
		public RuleCall getIdEdgeIdParserRuleCall_1_0() { return cIdEdgeIdParserRuleCall_1_0; }
	}

	public class CgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCgKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesAttributesParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		
		//Cg:
		//	"cg" attributes=Attributes;
		public ParserRule getRule() { return rule; }

		//"cg" attributes=Attributes
		public Group getGroup() { return cGroup; }

		//"cg"
		public Keyword getCgKeyword_0() { return cCgKeyword_0; }

		//attributes=Attributes
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//Attributes
		public RuleCall getAttributesAttributesParserRuleCall_1_0() { return cAttributesAttributesParserRuleCall_1_0; }
	}

	public class StElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "St");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRealAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRealREALTerminalRuleCall_1_0 = (RuleCall)cRealAssignment_1.eContents().get(0);
		
		//St:
		//	"st" real=REAL;
		public ParserRule getRule() { return rule; }

		//"st" real=REAL
		public Group getGroup() { return cGroup; }

		//"st"
		public Keyword getStKeyword_0() { return cStKeyword_0; }

		//real=REAL
		public Assignment getRealAssignment_1() { return cRealAssignment_1; }

		//REAL
		public RuleCall getRealREALTerminalRuleCall_1_0() { return cRealREALTerminalRuleCall_1_0; }
	}

	public class AttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributesAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeAttributeParserRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		
		//Attributes:
		//	{Attributes} attribute+=Attribute*;
		public ParserRule getRule() { return rule; }

		//{Attributes} attribute+=Attribute*
		public Group getGroup() { return cGroup; }

		//{Attributes}
		public Action getAttributesAction_0() { return cAttributesAction_0; }

		//attribute+=Attribute*
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }

		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_1_0() { return cAttributeAttributeParserRuleCall_1_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorOPERATORTerminalRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cIdAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdAttributeIdParserRuleCall_1_0 = (RuleCall)cIdAttributeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAssignAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAssignASSIGNTerminalRuleCall_2_0_0 = (RuleCall)cAssignAssignment_2_0.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cOtherValuesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cOtherValuesValueParserRuleCall_2_2_1_0 = (RuleCall)cOtherValuesAssignment_2_2_1.eContents().get(0);
		
		//Attribute:
		//	operator=OPERATOR? idAttribute=Id (assign=ASSIGN value=Value ("," otherValues+=Value)*)?;
		public ParserRule getRule() { return rule; }

		//operator=OPERATOR? idAttribute=Id (assign=ASSIGN value=Value ("," otherValues+=Value)*)?
		public Group getGroup() { return cGroup; }

		//operator=OPERATOR?
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//OPERATOR
		public RuleCall getOperatorOPERATORTerminalRuleCall_0_0() { return cOperatorOPERATORTerminalRuleCall_0_0; }

		//idAttribute=Id
		public Assignment getIdAttributeAssignment_1() { return cIdAttributeAssignment_1; }

		//Id
		public RuleCall getIdAttributeIdParserRuleCall_1_0() { return cIdAttributeIdParserRuleCall_1_0; }

		//(assign=ASSIGN value=Value ("," otherValues+=Value)*)?
		public Group getGroup_2() { return cGroup_2; }

		//assign=ASSIGN
		public Assignment getAssignAssignment_2_0() { return cAssignAssignment_2_0; }

		//ASSIGN
		public RuleCall getAssignASSIGNTerminalRuleCall_2_0_0() { return cAssignASSIGNTerminalRuleCall_2_0_0; }

		//value=Value
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_1_0() { return cValueValueParserRuleCall_2_1_0; }

		//("," otherValues+=Value)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//otherValues+=Value
		public Assignment getOtherValuesAssignment_2_2_1() { return cOtherValuesAssignment_2_2_1; }

		//Value
		public RuleCall getOtherValuesValueParserRuleCall_2_2_1_0() { return cOtherValuesValueParserRuleCall_2_2_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStringAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStringSTRINGTerminalRuleCall_0_0 = (RuleCall)cStringAssignment_0.eContents().get(0);
		private final Assignment cRealAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRealREALTerminalRuleCall_1_0 = (RuleCall)cRealAssignment_1.eContents().get(0);
		private final Assignment cIntAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIntINTTerminalRuleCall_2_0 = (RuleCall)cIntAssignment_2.eContents().get(0);
		private final Assignment cArrayAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cArrayArrayParserRuleCall_3_0 = (RuleCall)cArrayAssignment_3.eContents().get(0);
		private final Assignment cMapAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cMapMapParserRuleCall_4_0 = (RuleCall)cMapAssignment_4.eContents().get(0);
		
		//Value:
		//	string=STRING | real=REAL | int=INT | array=Array | map=Map;
		public ParserRule getRule() { return rule; }

		//string=STRING | real=REAL | int=INT | array=Array | map=Map
		public Alternatives getAlternatives() { return cAlternatives; }

		//string=STRING
		public Assignment getStringAssignment_0() { return cStringAssignment_0; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_0_0() { return cStringSTRINGTerminalRuleCall_0_0; }

		//real=REAL
		public Assignment getRealAssignment_1() { return cRealAssignment_1; }

		//REAL
		public RuleCall getRealREALTerminalRuleCall_1_0() { return cRealREALTerminalRuleCall_1_0; }

		//int=INT
		public Assignment getIntAssignment_2() { return cIntAssignment_2; }

		//INT
		public RuleCall getIntINTTerminalRuleCall_2_0() { return cIntINTTerminalRuleCall_2_0; }

		//array=Array
		public Assignment getArrayAssignment_3() { return cArrayAssignment_3; }

		//Array
		public RuleCall getArrayArrayParserRuleCall_3_0() { return cArrayArrayParserRuleCall_3_0; }

		//map=Map
		public Assignment getMapAssignment_4() { return cMapAssignment_4; }

		//Map
		public RuleCall getMapMapParserRuleCall_4_0() { return cMapMapParserRuleCall_4_0; }
	}

	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValueValueParserRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOtherValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOtherValuesValueParserRuleCall_2_1_1_0 = (RuleCall)cOtherValuesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Array:
		//	{Array} "{" (value=Value ("," otherValues+=Value)*)? "}";
		public ParserRule getRule() { return rule; }

		//{Array} "{" (value=Value ("," otherValues+=Value)*)? "}"
		public Group getGroup() { return cGroup; }

		//{Array}
		public Action getArrayAction_0() { return cArrayAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(value=Value ("," otherValues+=Value)*)?
		public Group getGroup_2() { return cGroup_2; }

		//value=Value
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0_0() { return cValueValueParserRuleCall_2_0_0; }

		//("," otherValues+=Value)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//otherValues+=Value
		public Assignment getOtherValuesAssignment_2_1_1() { return cOtherValuesAssignment_2_1_1; }

		//Value
		public RuleCall getOtherValuesValueParserRuleCall_2_1_1_0() { return cOtherValuesValueParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMappingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMappingMappingParserRuleCall_1_0 = (RuleCall)cMappingAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOtherMappingAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOtherMappingMappingParserRuleCall_2_1_0 = (RuleCall)cOtherMappingAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Map:
		//	"[" mapping=Mapping ("," otherMapping+=Mapping)* "]";
		public ParserRule getRule() { return rule; }

		//"[" mapping=Mapping ("," otherMapping+=Mapping)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//mapping=Mapping
		public Assignment getMappingAssignment_1() { return cMappingAssignment_1; }

		//Mapping
		public RuleCall getMappingMappingParserRuleCall_1_0() { return cMappingMappingParserRuleCall_1_0; }

		//("," otherMapping+=Mapping)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//otherMapping+=Mapping
		public Assignment getOtherMappingAssignment_2_1() { return cOtherMappingAssignment_2_1; }

		//Mapping
		public RuleCall getOtherMappingMappingParserRuleCall_2_1_0() { return cOtherMappingMappingParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIdParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Assignment cAssignAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssignASSIGNTerminalRuleCall_1_0 = (RuleCall)cAssignAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Mapping:
		//	id=Id assign=ASSIGN value=Value;
		public ParserRule getRule() { return rule; }

		//id=Id assign=ASSIGN value=Value
		public Group getGroup() { return cGroup; }

		//id=Id
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//Id
		public RuleCall getIdIdParserRuleCall_0_0() { return cIdIdParserRuleCall_0_0; }

		//assign=ASSIGN
		public Assignment getAssignAssignment_1() { return cAssignAssignment_1; }

		//ASSIGN
		public RuleCall getAssignASSIGNTerminalRuleCall_1_0() { return cAssignASSIGNTerminalRuleCall_1_0; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}

	public class IdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Id");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cWORDTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final RuleCall cWORDTerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		
		//Id returns ecore::EString:
		//	STRING | INT | WORD ("." WORD)*;
		public ParserRule getRule() { return rule; }

		//STRING | INT | WORD ("." WORD)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//WORD ("." WORD)*
		public Group getGroup_2() { return cGroup_2; }

		//WORD
		public RuleCall getWORDTerminalRuleCall_2_0() { return cWORDTerminalRuleCall_2_0; }

		//("." WORD)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"."
		public Keyword getFullStopKeyword_2_1_0() { return cFullStopKeyword_2_1_0; }

		//WORD
		public RuleCall getWORDTerminalRuleCall_2_1_1() { return cWORDTerminalRuleCall_2_1_1; }
	}
	
	
	private DgsElements pDgs;
	private HeaderElements pHeader;
	private TerminalRule tMAGIC;
	private EventElements pEvent;
	private AnElements pAn;
	private CnElements pCn;
	private DnElements pDn;
	private AeElements pAe;
	private CeElements pCe;
	private DeElements pDe;
	private CgElements pCg;
	private StElements pSt;
	private TerminalRule tCl;
	private AttributesElements pAttributes;
	private AttributeElements pAttribute;
	private ValueElements pValue;
	private ArrayElements pArray;
	private MapElements pMap;
	private MappingElements pMapping;
	private TerminalRule tOPERATOR;
	private TerminalRule tDIRECTION;
	private TerminalRule tASSIGN;
	private IdElements pId;
	private TerminalRule tCOMMENT;
	private TerminalRule tINT;
	private TerminalRule tREAL;
	private TerminalRule tWORD;
	private TerminalRule tSTRING;
	private TerminalRule tEOL;
	private TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public DGSGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.graphstream.DGS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Dgs:
	//	header=Header (event+=Event | comment+=COMMENT | EOL)*;
	public DgsElements getDgsAccess() {
		return (pDgs != null) ? pDgs : (pDgs = new DgsElements());
	}
	
	public ParserRule getDgsRule() {
		return getDgsAccess().getRule();
	}

	//Header:
	//	magic=MAGIC EOL name=Id numberOfSteps=INT numberOfEvents=INT EOL;
	public HeaderElements getHeaderAccess() {
		return (pHeader != null) ? pHeader : (pHeader = new HeaderElements());
	}
	
	public ParserRule getHeaderRule() {
		return getHeaderAccess().getRule();
	}

	//terminal MAGIC:
	//	"DGS003" | "DGS004";
	public TerminalRule getMAGICRule() {
		return (tMAGIC != null) ? tMAGIC : (tMAGIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAGIC"));
	} 

	//Event:
	//	(an=An | cn=Cn | dn=Dn | ae=Ae | ce=Ce | de=De | cg=Cg | st=St | cl=Cl) (comment=COMMENT | EOL);
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//An:
	//	"an" idNode=Id attributes=Attributes;
	public AnElements getAnAccess() {
		return (pAn != null) ? pAn : (pAn = new AnElements());
	}
	
	public ParserRule getAnRule() {
		return getAnAccess().getRule();
	}

	//Cn:
	//	"cn" idNode=Id attributes=Attributes;
	public CnElements getCnAccess() {
		return (pCn != null) ? pCn : (pCn = new CnElements());
	}
	
	public ParserRule getCnRule() {
		return getCnAccess().getRule();
	}

	//Dn:
	//	"dn" idNode=Id;
	public DnElements getDnAccess() {
		return (pDn != null) ? pDn : (pDn = new DnElements());
	}
	
	public ParserRule getDnRule() {
		return getDnAccess().getRule();
	}

	//Ae:
	//	"ae" idEdge=Id idNode1=Id direction=DIRECTION? idNode2=Id attributes=Attributes;
	public AeElements getAeAccess() {
		return (pAe != null) ? pAe : (pAe = new AeElements());
	}
	
	public ParserRule getAeRule() {
		return getAeAccess().getRule();
	}

	//Ce:
	//	"ce" idEdge=Id attributes=Attributes;
	public CeElements getCeAccess() {
		return (pCe != null) ? pCe : (pCe = new CeElements());
	}
	
	public ParserRule getCeRule() {
		return getCeAccess().getRule();
	}

	//De:
	//	"de" idEdge=Id;
	public DeElements getDeAccess() {
		return (pDe != null) ? pDe : (pDe = new DeElements());
	}
	
	public ParserRule getDeRule() {
		return getDeAccess().getRule();
	}

	//Cg:
	//	"cg" attributes=Attributes;
	public CgElements getCgAccess() {
		return (pCg != null) ? pCg : (pCg = new CgElements());
	}
	
	public ParserRule getCgRule() {
		return getCgAccess().getRule();
	}

	//St:
	//	"st" real=REAL;
	public StElements getStAccess() {
		return (pSt != null) ? pSt : (pSt = new StElements());
	}
	
	public ParserRule getStRule() {
		return getStAccess().getRule();
	}

	//terminal Cl:
	//	"cl";
	public TerminalRule getClRule() {
		return (tCl != null) ? tCl : (tCl = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Cl"));
	} 

	//Attributes:
	//	{Attributes} attribute+=Attribute*;
	public AttributesElements getAttributesAccess() {
		return (pAttributes != null) ? pAttributes : (pAttributes = new AttributesElements());
	}
	
	public ParserRule getAttributesRule() {
		return getAttributesAccess().getRule();
	}

	//Attribute:
	//	operator=OPERATOR? idAttribute=Id (assign=ASSIGN value=Value ("," otherValues+=Value)*)?;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Value:
	//	string=STRING | real=REAL | int=INT | array=Array | map=Map;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Array:
	//	{Array} "{" (value=Value ("," otherValues+=Value)*)? "}";
	public ArrayElements getArrayAccess() {
		return (pArray != null) ? pArray : (pArray = new ArrayElements());
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}

	//Map:
	//	"[" mapping=Mapping ("," otherMapping+=Mapping)* "]";
	public MapElements getMapAccess() {
		return (pMap != null) ? pMap : (pMap = new MapElements());
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}

	//Mapping:
	//	id=Id assign=ASSIGN value=Value;
	public MappingElements getMappingAccess() {
		return (pMapping != null) ? pMapping : (pMapping = new MappingElements());
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}

	//terminal OPERATOR:
	//	"+" | "-";
	public TerminalRule getOPERATORRule() {
		return (tOPERATOR != null) ? tOPERATOR : (tOPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OPERATOR"));
	} 

	//terminal DIRECTION:
	//	"<" | ">";
	public TerminalRule getDIRECTIONRule() {
		return (tDIRECTION != null) ? tDIRECTION : (tDIRECTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIRECTION"));
	} 

	//terminal ASSIGN:
	//	"=" | ":";
	public TerminalRule getASSIGNRule() {
		return (tASSIGN != null) ? tASSIGN : (tASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ASSIGN"));
	} 

	//Id returns ecore::EString:
	//	STRING | INT | WORD ("." WORD)*;
	public IdElements getIdAccess() {
		return (pId != null) ? pId : (pId = new IdElements());
	}
	
	public ParserRule getIdRule() {
		return getIdAccess().getRule();
	}

	//terminal COMMENT:
	//	"#"->EOL;
	public TerminalRule getCOMMENTRule() {
		return (tCOMMENT != null) ? tCOMMENT : (tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0" | "1".."9" "0".."9"*;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal REAL returns ecore::EDouble:
	//	INT ("." "0"* INT)?;
	public TerminalRule getREALRule() {
		return (tREAL != null) ? tREAL : (tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL"));
	} 

	//terminal WORD:
	//	("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "0".."9" | "-" | "_")*;
	public TerminalRule getWORDRule() {
		return (tWORD != null) ? tWORD : (tWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WORD"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal EOL:
	//	"\r"? "\n";
	public TerminalRule getEOLRule() {
		return (tEOL != null) ? tEOL : (tEOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EOL"));
	} 

	//terminal WS:
	//	(" " | "\t")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
