/*
* generated by Xtext
*/
package org.graphstream.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.graphstream.services.DGSGrammarAccess;

public class DGSParser extends AbstractContentAssistParser {
	
	@Inject
	private DGSGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.graphstream.ui.contentassist.antlr.internal.InternalDGSParser createParser() {
		org.graphstream.ui.contentassist.antlr.internal.InternalDGSParser result = new org.graphstream.ui.contentassist.antlr.internal.InternalDGSParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDgsAccess().getAlternatives_1(), "rule__Dgs__Alternatives_1");
					put(grammarAccess.getEventAccess().getAlternatives_0(), "rule__Event__Alternatives_0");
					put(grammarAccess.getEventAccess().getAlternatives_1(), "rule__Event__Alternatives_1");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getIdAccess().getAlternatives(), "rule__Id__Alternatives");
					put(grammarAccess.getDgsAccess().getGroup(), "rule__Dgs__Group__0");
					put(grammarAccess.getHeaderAccess().getGroup(), "rule__Header__Group__0");
					put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
					put(grammarAccess.getAnAccess().getGroup(), "rule__An__Group__0");
					put(grammarAccess.getCnAccess().getGroup(), "rule__Cn__Group__0");
					put(grammarAccess.getDnAccess().getGroup(), "rule__Dn__Group__0");
					put(grammarAccess.getAeAccess().getGroup(), "rule__Ae__Group__0");
					put(grammarAccess.getCeAccess().getGroup(), "rule__Ce__Group__0");
					put(grammarAccess.getDeAccess().getGroup(), "rule__De__Group__0");
					put(grammarAccess.getCgAccess().getGroup(), "rule__Cg__Group__0");
					put(grammarAccess.getStAccess().getGroup(), "rule__St__Group__0");
					put(grammarAccess.getAttributesAccess().getGroup(), "rule__Attributes__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup_2(), "rule__Attribute__Group_2__0");
					put(grammarAccess.getAttributeAccess().getGroup_2_2(), "rule__Attribute__Group_2_2__0");
					put(grammarAccess.getArrayAccess().getGroup(), "rule__Array__Group__0");
					put(grammarAccess.getArrayAccess().getGroup_2(), "rule__Array__Group_2__0");
					put(grammarAccess.getArrayAccess().getGroup_2_1(), "rule__Array__Group_2_1__0");
					put(grammarAccess.getMapAccess().getGroup(), "rule__Map__Group__0");
					put(grammarAccess.getMapAccess().getGroup_2(), "rule__Map__Group_2__0");
					put(grammarAccess.getMappingAccess().getGroup(), "rule__Mapping__Group__0");
					put(grammarAccess.getIdAccess().getGroup_2(), "rule__Id__Group_2__0");
					put(grammarAccess.getIdAccess().getGroup_2_1(), "rule__Id__Group_2_1__0");
					put(grammarAccess.getDgsAccess().getHeaderAssignment_0(), "rule__Dgs__HeaderAssignment_0");
					put(grammarAccess.getDgsAccess().getEventAssignment_1_0(), "rule__Dgs__EventAssignment_1_0");
					put(grammarAccess.getDgsAccess().getCommentAssignment_1_1(), "rule__Dgs__CommentAssignment_1_1");
					put(grammarAccess.getHeaderAccess().getMagicAssignment_0(), "rule__Header__MagicAssignment_0");
					put(grammarAccess.getHeaderAccess().getNameAssignment_2(), "rule__Header__NameAssignment_2");
					put(grammarAccess.getHeaderAccess().getNumberOfStepsAssignment_3(), "rule__Header__NumberOfStepsAssignment_3");
					put(grammarAccess.getHeaderAccess().getNumberOfEventsAssignment_4(), "rule__Header__NumberOfEventsAssignment_4");
					put(grammarAccess.getEventAccess().getAnAssignment_0_0(), "rule__Event__AnAssignment_0_0");
					put(grammarAccess.getEventAccess().getCnAssignment_0_1(), "rule__Event__CnAssignment_0_1");
					put(grammarAccess.getEventAccess().getDnAssignment_0_2(), "rule__Event__DnAssignment_0_2");
					put(grammarAccess.getEventAccess().getAeAssignment_0_3(), "rule__Event__AeAssignment_0_3");
					put(grammarAccess.getEventAccess().getCeAssignment_0_4(), "rule__Event__CeAssignment_0_4");
					put(grammarAccess.getEventAccess().getDeAssignment_0_5(), "rule__Event__DeAssignment_0_5");
					put(grammarAccess.getEventAccess().getCgAssignment_0_6(), "rule__Event__CgAssignment_0_6");
					put(grammarAccess.getEventAccess().getStAssignment_0_7(), "rule__Event__StAssignment_0_7");
					put(grammarAccess.getEventAccess().getClAssignment_0_8(), "rule__Event__ClAssignment_0_8");
					put(grammarAccess.getEventAccess().getCommentAssignment_1_0(), "rule__Event__CommentAssignment_1_0");
					put(grammarAccess.getAnAccess().getIdNodeAssignment_1(), "rule__An__IdNodeAssignment_1");
					put(grammarAccess.getAnAccess().getAttributesAssignment_2(), "rule__An__AttributesAssignment_2");
					put(grammarAccess.getCnAccess().getIdNodeAssignment_1(), "rule__Cn__IdNodeAssignment_1");
					put(grammarAccess.getCnAccess().getAttributesAssignment_2(), "rule__Cn__AttributesAssignment_2");
					put(grammarAccess.getDnAccess().getIdNodeAssignment_1(), "rule__Dn__IdNodeAssignment_1");
					put(grammarAccess.getAeAccess().getIdEdgeAssignment_1(), "rule__Ae__IdEdgeAssignment_1");
					put(grammarAccess.getAeAccess().getIdNode1Assignment_2(), "rule__Ae__IdNode1Assignment_2");
					put(grammarAccess.getAeAccess().getDirectionAssignment_3(), "rule__Ae__DirectionAssignment_3");
					put(grammarAccess.getAeAccess().getIdNode2Assignment_4(), "rule__Ae__IdNode2Assignment_4");
					put(grammarAccess.getAeAccess().getAttributesAssignment_5(), "rule__Ae__AttributesAssignment_5");
					put(grammarAccess.getCeAccess().getIdEdgeAssignment_1(), "rule__Ce__IdEdgeAssignment_1");
					put(grammarAccess.getCeAccess().getAttributesAssignment_2(), "rule__Ce__AttributesAssignment_2");
					put(grammarAccess.getDeAccess().getIdEdgeAssignment_1(), "rule__De__IdEdgeAssignment_1");
					put(grammarAccess.getCgAccess().getAttributesAssignment_1(), "rule__Cg__AttributesAssignment_1");
					put(grammarAccess.getStAccess().getRealAssignment_1(), "rule__St__RealAssignment_1");
					put(grammarAccess.getAttributesAccess().getAttributeAssignment_1(), "rule__Attributes__AttributeAssignment_1");
					put(grammarAccess.getAttributeAccess().getOperatorAssignment_0(), "rule__Attribute__OperatorAssignment_0");
					put(grammarAccess.getAttributeAccess().getIdAttributeAssignment_1(), "rule__Attribute__IdAttributeAssignment_1");
					put(grammarAccess.getAttributeAccess().getAssignAssignment_2_0(), "rule__Attribute__AssignAssignment_2_0");
					put(grammarAccess.getAttributeAccess().getValueAssignment_2_1(), "rule__Attribute__ValueAssignment_2_1");
					put(grammarAccess.getAttributeAccess().getOtherValuesAssignment_2_2_1(), "rule__Attribute__OtherValuesAssignment_2_2_1");
					put(grammarAccess.getValueAccess().getStringAssignment_0(), "rule__Value__StringAssignment_0");
					put(grammarAccess.getValueAccess().getRealAssignment_1(), "rule__Value__RealAssignment_1");
					put(grammarAccess.getValueAccess().getIntAssignment_2(), "rule__Value__IntAssignment_2");
					put(grammarAccess.getValueAccess().getArrayAssignment_3(), "rule__Value__ArrayAssignment_3");
					put(grammarAccess.getValueAccess().getMapAssignment_4(), "rule__Value__MapAssignment_4");
					put(grammarAccess.getArrayAccess().getValueAssignment_2_0(), "rule__Array__ValueAssignment_2_0");
					put(grammarAccess.getArrayAccess().getOtherValuesAssignment_2_1_1(), "rule__Array__OtherValuesAssignment_2_1_1");
					put(grammarAccess.getMapAccess().getMappingAssignment_1(), "rule__Map__MappingAssignment_1");
					put(grammarAccess.getMapAccess().getOtherMappingAssignment_2_1(), "rule__Map__OtherMappingAssignment_2_1");
					put(grammarAccess.getMappingAccess().getIdAssignment_0(), "rule__Mapping__IdAssignment_0");
					put(grammarAccess.getMappingAccess().getAssignAssignment_1(), "rule__Mapping__AssignAssignment_1");
					put(grammarAccess.getMappingAccess().getValueAssignment_2(), "rule__Mapping__ValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.graphstream.ui.contentassist.antlr.internal.InternalDGSParser typedParser = (org.graphstream.ui.contentassist.antlr.internal.InternalDGSParser) parser;
			typedParser.entryRuleDgs();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS" };
	}
	
	public DGSGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DGSGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
