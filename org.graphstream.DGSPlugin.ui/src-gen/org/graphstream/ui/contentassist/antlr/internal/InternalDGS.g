/*
* generated by Xtext
*/
grammar InternalDGS;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.graphstream.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.graphstream.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.graphstream.services.DGSGrammarAccess;

}

@parser::members {
 
 	private DGSGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DGSGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDgs
entryRuleDgs 
:
{ before(grammarAccess.getDgsRule()); }
	 ruleDgs
{ after(grammarAccess.getDgsRule()); } 
	 EOF 
;

// Rule Dgs
ruleDgs
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDgsAccess().getGroup()); }
(rule__Dgs__Group__0)
{ after(grammarAccess.getDgsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHeader
entryRuleHeader 
:
{ before(grammarAccess.getHeaderRule()); }
	 ruleHeader
{ after(grammarAccess.getHeaderRule()); } 
	 EOF 
;

// Rule Header
ruleHeader
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHeaderAccess().getGroup()); }
(rule__Header__Group__0)
{ after(grammarAccess.getHeaderAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvent
entryRuleEvent 
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventAccess().getGroup()); }
(rule__Event__Group__0)
{ after(grammarAccess.getEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAn
entryRuleAn 
:
{ before(grammarAccess.getAnRule()); }
	 ruleAn
{ after(grammarAccess.getAnRule()); } 
	 EOF 
;

// Rule An
ruleAn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnAccess().getGroup()); }
(rule__An__Group__0)
{ after(grammarAccess.getAnAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCn
entryRuleCn 
:
{ before(grammarAccess.getCnRule()); }
	 ruleCn
{ after(grammarAccess.getCnRule()); } 
	 EOF 
;

// Rule Cn
ruleCn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCnAccess().getGroup()); }
(rule__Cn__Group__0)
{ after(grammarAccess.getCnAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDn
entryRuleDn 
:
{ before(grammarAccess.getDnRule()); }
	 ruleDn
{ after(grammarAccess.getDnRule()); } 
	 EOF 
;

// Rule Dn
ruleDn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDnAccess().getGroup()); }
(rule__Dn__Group__0)
{ after(grammarAccess.getDnAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAe
entryRuleAe 
:
{ before(grammarAccess.getAeRule()); }
	 ruleAe
{ after(grammarAccess.getAeRule()); } 
	 EOF 
;

// Rule Ae
ruleAe
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAeAccess().getGroup()); }
(rule__Ae__Group__0)
{ after(grammarAccess.getAeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCe
entryRuleCe 
:
{ before(grammarAccess.getCeRule()); }
	 ruleCe
{ after(grammarAccess.getCeRule()); } 
	 EOF 
;

// Rule Ce
ruleCe
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCeAccess().getGroup()); }
(rule__Ce__Group__0)
{ after(grammarAccess.getCeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDe
entryRuleDe 
:
{ before(grammarAccess.getDeRule()); }
	 ruleDe
{ after(grammarAccess.getDeRule()); } 
	 EOF 
;

// Rule De
ruleDe
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeAccess().getGroup()); }
(rule__De__Group__0)
{ after(grammarAccess.getDeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCg
entryRuleCg 
:
{ before(grammarAccess.getCgRule()); }
	 ruleCg
{ after(grammarAccess.getCgRule()); } 
	 EOF 
;

// Rule Cg
ruleCg
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCgAccess().getGroup()); }
(rule__Cg__Group__0)
{ after(grammarAccess.getCgAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSt
entryRuleSt 
:
{ before(grammarAccess.getStRule()); }
	 ruleSt
{ after(grammarAccess.getStRule()); } 
	 EOF 
;

// Rule St
ruleSt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStAccess().getGroup()); }
(rule__St__Group__0)
{ after(grammarAccess.getStAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributes
entryRuleAttributes 
:
{ before(grammarAccess.getAttributesRule()); }
	 ruleAttributes
{ after(grammarAccess.getAttributesRule()); } 
	 EOF 
;

// Rule Attributes
ruleAttributes
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributesAccess().getGroup()); }
(rule__Attributes__Group__0)
{ after(grammarAccess.getAttributesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttribute
entryRuleAttribute 
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeAccess().getGroup()); }
(rule__Attribute__Group__0)
{ after(grammarAccess.getAttributeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArray
entryRuleArray 
:
{ before(grammarAccess.getArrayRule()); }
	 ruleArray
{ after(grammarAccess.getArrayRule()); } 
	 EOF 
;

// Rule Array
ruleArray
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayAccess().getGroup()); }
(rule__Array__Group__0)
{ after(grammarAccess.getArrayAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMap
entryRuleMap 
:
{ before(grammarAccess.getMapRule()); }
	 ruleMap
{ after(grammarAccess.getMapRule()); } 
	 EOF 
;

// Rule Map
ruleMap
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMapAccess().getGroup()); }
(rule__Map__Group__0)
{ after(grammarAccess.getMapAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMapping
entryRuleMapping 
:
{ before(grammarAccess.getMappingRule()); }
	 ruleMapping
{ after(grammarAccess.getMappingRule()); } 
	 EOF 
;

// Rule Mapping
ruleMapping
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMappingAccess().getGroup()); }
(rule__Mapping__Group__0)
{ after(grammarAccess.getMappingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleId
entryRuleId 
:
{ before(grammarAccess.getIdRule()); }
	 ruleId
{ after(grammarAccess.getIdRule()); } 
	 EOF 
;

// Rule Id
ruleId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIdAccess().getAlternatives()); }
(rule__Id__Alternatives)
{ after(grammarAccess.getIdAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Dgs__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDgsAccess().getEventAssignment_1_0()); }
(rule__Dgs__EventAssignment_1_0)
{ after(grammarAccess.getDgsAccess().getEventAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getDgsAccess().getCommentAssignment_1_1()); }
(rule__Dgs__CommentAssignment_1_1)
{ after(grammarAccess.getDgsAccess().getCommentAssignment_1_1()); }
)

    |(
{ before(grammarAccess.getDgsAccess().getEOLTerminalRuleCall_1_2()); }
	RULE_EOL
{ after(grammarAccess.getDgsAccess().getEOLTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getAnAssignment_0_0()); }
(rule__Event__AnAssignment_0_0)
{ after(grammarAccess.getEventAccess().getAnAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getEventAccess().getCnAssignment_0_1()); }
(rule__Event__CnAssignment_0_1)
{ after(grammarAccess.getEventAccess().getCnAssignment_0_1()); }
)

    |(
{ before(grammarAccess.getEventAccess().getDnAssignment_0_2()); }
(rule__Event__DnAssignment_0_2)
{ after(grammarAccess.getEventAccess().getDnAssignment_0_2()); }
)

    |(
{ before(grammarAccess.getEventAccess().getAeAssignment_0_3()); }
(rule__Event__AeAssignment_0_3)
{ after(grammarAccess.getEventAccess().getAeAssignment_0_3()); }
)

    |(
{ before(grammarAccess.getEventAccess().getCeAssignment_0_4()); }
(rule__Event__CeAssignment_0_4)
{ after(grammarAccess.getEventAccess().getCeAssignment_0_4()); }
)

    |(
{ before(grammarAccess.getEventAccess().getDeAssignment_0_5()); }
(rule__Event__DeAssignment_0_5)
{ after(grammarAccess.getEventAccess().getDeAssignment_0_5()); }
)

    |(
{ before(grammarAccess.getEventAccess().getCgAssignment_0_6()); }
(rule__Event__CgAssignment_0_6)
{ after(grammarAccess.getEventAccess().getCgAssignment_0_6()); }
)

    |(
{ before(grammarAccess.getEventAccess().getStAssignment_0_7()); }
(rule__Event__StAssignment_0_7)
{ after(grammarAccess.getEventAccess().getStAssignment_0_7()); }
)

    |(
{ before(grammarAccess.getEventAccess().getClAssignment_0_8()); }
(rule__Event__ClAssignment_0_8)
{ after(grammarAccess.getEventAccess().getClAssignment_0_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getCommentAssignment_1_0()); }
(rule__Event__CommentAssignment_1_0)
{ after(grammarAccess.getEventAccess().getCommentAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getEventAccess().getEOLTerminalRuleCall_1_1()); }
	RULE_EOL
{ after(grammarAccess.getEventAccess().getEOLTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getStringAssignment_0()); }
(rule__Value__StringAssignment_0)
{ after(grammarAccess.getValueAccess().getStringAssignment_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getRealAssignment_1()); }
(rule__Value__RealAssignment_1)
{ after(grammarAccess.getValueAccess().getRealAssignment_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getIntAssignment_2()); }
(rule__Value__IntAssignment_2)
{ after(grammarAccess.getValueAccess().getIntAssignment_2()); }
)

    |(
{ before(grammarAccess.getValueAccess().getArrayAssignment_3()); }
(rule__Value__ArrayAssignment_3)
{ after(grammarAccess.getValueAccess().getArrayAssignment_3()); }
)

    |(
{ before(grammarAccess.getValueAccess().getMapAssignment_4()); }
(rule__Value__MapAssignment_4)
{ after(grammarAccess.getValueAccess().getMapAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Id__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getIdAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getIdAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getIdAccess().getINTTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getIdAccess().getGroup_2()); }
(rule__Id__Group_2__0)
{ after(grammarAccess.getIdAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Dgs__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dgs__Group__0__Impl
	rule__Dgs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dgs__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDgsAccess().getHeaderAssignment_0()); }
(rule__Dgs__HeaderAssignment_0)
{ after(grammarAccess.getDgsAccess().getHeaderAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dgs__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dgs__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dgs__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDgsAccess().getAlternatives_1()); }
(rule__Dgs__Alternatives_1)*
{ after(grammarAccess.getDgsAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Header__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__0__Impl
	rule__Header__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getMagicAssignment_0()); }
(rule__Header__MagicAssignment_0)
{ after(grammarAccess.getHeaderAccess().getMagicAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__1__Impl
	rule__Header__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getEOLTerminalRuleCall_1()); }
	RULE_EOL
{ after(grammarAccess.getHeaderAccess().getEOLTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__2__Impl
	rule__Header__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getNameAssignment_2()); }
(rule__Header__NameAssignment_2)
{ after(grammarAccess.getHeaderAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__3__Impl
	rule__Header__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getNumberOfStepsAssignment_3()); }
(rule__Header__NumberOfStepsAssignment_3)
{ after(grammarAccess.getHeaderAccess().getNumberOfStepsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__4__Impl
	rule__Header__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getNumberOfEventsAssignment_4()); }
(rule__Header__NumberOfEventsAssignment_4)
{ after(grammarAccess.getHeaderAccess().getNumberOfEventsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getEOLTerminalRuleCall_5()); }
	RULE_EOL
{ after(grammarAccess.getHeaderAccess().getEOLTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Event__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__0__Impl
	rule__Event__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getAlternatives_0()); }
(rule__Event__Alternatives_0)
{ after(grammarAccess.getEventAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getAlternatives_1()); }
(rule__Event__Alternatives_1)
{ after(grammarAccess.getEventAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__An__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__An__Group__0__Impl
	rule__An__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__An__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnAccess().getAnKeyword_0()); }

	'an' 

{ after(grammarAccess.getAnAccess().getAnKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__An__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__An__Group__1__Impl
	rule__An__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__An__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnAccess().getIdNodeAssignment_1()); }
(rule__An__IdNodeAssignment_1)
{ after(grammarAccess.getAnAccess().getIdNodeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__An__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__An__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__An__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnAccess().getAttributesAssignment_2()); }
(rule__An__AttributesAssignment_2)
{ after(grammarAccess.getAnAccess().getAttributesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Cn__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cn__Group__0__Impl
	rule__Cn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cn__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCnAccess().getCnKeyword_0()); }

	'cn' 

{ after(grammarAccess.getCnAccess().getCnKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cn__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cn__Group__1__Impl
	rule__Cn__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Cn__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCnAccess().getIdNodeAssignment_1()); }
(rule__Cn__IdNodeAssignment_1)
{ after(grammarAccess.getCnAccess().getIdNodeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cn__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cn__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cn__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCnAccess().getAttributesAssignment_2()); }
(rule__Cn__AttributesAssignment_2)
{ after(grammarAccess.getCnAccess().getAttributesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Dn__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dn__Group__0__Impl
	rule__Dn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dn__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDnAccess().getDnKeyword_0()); }

	'dn' 

{ after(grammarAccess.getDnAccess().getDnKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dn__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dn__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dn__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDnAccess().getIdNodeAssignment_1()); }
(rule__Dn__IdNodeAssignment_1)
{ after(grammarAccess.getDnAccess().getIdNodeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Ae__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ae__Group__0__Impl
	rule__Ae__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ae__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAeAccess().getAeKeyword_0()); }

	'ae' 

{ after(grammarAccess.getAeAccess().getAeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ae__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ae__Group__1__Impl
	rule__Ae__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Ae__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAeAccess().getIdEdgeAssignment_1()); }
(rule__Ae__IdEdgeAssignment_1)
{ after(grammarAccess.getAeAccess().getIdEdgeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ae__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ae__Group__2__Impl
	rule__Ae__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Ae__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAeAccess().getIdNode1Assignment_2()); }
(rule__Ae__IdNode1Assignment_2)
{ after(grammarAccess.getAeAccess().getIdNode1Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ae__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ae__Group__3__Impl
	rule__Ae__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Ae__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAeAccess().getDirectionAssignment_3()); }
(rule__Ae__DirectionAssignment_3)?
{ after(grammarAccess.getAeAccess().getDirectionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ae__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ae__Group__4__Impl
	rule__Ae__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Ae__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAeAccess().getIdNode2Assignment_4()); }
(rule__Ae__IdNode2Assignment_4)
{ after(grammarAccess.getAeAccess().getIdNode2Assignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ae__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ae__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ae__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAeAccess().getAttributesAssignment_5()); }
(rule__Ae__AttributesAssignment_5)
{ after(grammarAccess.getAeAccess().getAttributesAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Ce__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ce__Group__0__Impl
	rule__Ce__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ce__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCeAccess().getCeKeyword_0()); }

	'ce' 

{ after(grammarAccess.getCeAccess().getCeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ce__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ce__Group__1__Impl
	rule__Ce__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Ce__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCeAccess().getIdEdgeAssignment_1()); }
(rule__Ce__IdEdgeAssignment_1)
{ after(grammarAccess.getCeAccess().getIdEdgeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ce__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ce__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ce__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCeAccess().getAttributesAssignment_2()); }
(rule__Ce__AttributesAssignment_2)
{ after(grammarAccess.getCeAccess().getAttributesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__De__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__De__Group__0__Impl
	rule__De__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__De__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeAccess().getDeKeyword_0()); }

	'de' 

{ after(grammarAccess.getDeAccess().getDeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__De__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__De__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__De__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeAccess().getIdEdgeAssignment_1()); }
(rule__De__IdEdgeAssignment_1)
{ after(grammarAccess.getDeAccess().getIdEdgeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Cg__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cg__Group__0__Impl
	rule__Cg__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cg__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCgAccess().getCgKeyword_0()); }

	'cg' 

{ after(grammarAccess.getCgAccess().getCgKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cg__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cg__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cg__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCgAccess().getAttributesAssignment_1()); }
(rule__Cg__AttributesAssignment_1)
{ after(grammarAccess.getCgAccess().getAttributesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__St__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__St__Group__0__Impl
	rule__St__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__St__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStAccess().getStKeyword_0()); }

	'st' 

{ after(grammarAccess.getStAccess().getStKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__St__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__St__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__St__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStAccess().getRealAssignment_1()); }
(rule__St__RealAssignment_1)
{ after(grammarAccess.getStAccess().getRealAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Attributes__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attributes__Group__0__Impl
	rule__Attributes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributesAccess().getAttributesAction_0()); }
(

)
{ after(grammarAccess.getAttributesAccess().getAttributesAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attributes__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attributes__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributesAccess().getAttributeAssignment_1()); }
(rule__Attributes__AttributeAssignment_1)*
{ after(grammarAccess.getAttributesAccess().getAttributeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Attribute__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getOperatorAssignment_0()); }
(rule__Attribute__OperatorAssignment_0)?
{ after(grammarAccess.getAttributeAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getIdAttributeAssignment_1()); }
(rule__Attribute__IdAttributeAssignment_1)
{ after(grammarAccess.getAttributeAccess().getIdAttributeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getGroup_2()); }
(rule__Attribute__Group_2__0)?
{ after(grammarAccess.getAttributeAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Attribute__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_2__0__Impl
	rule__Attribute__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getAssignAssignment_2_0()); }
(rule__Attribute__AssignAssignment_2_0)
{ after(grammarAccess.getAttributeAccess().getAssignAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_2__1__Impl
	rule__Attribute__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getValueAssignment_2_1()); }
(rule__Attribute__ValueAssignment_2_1)
{ after(grammarAccess.getAttributeAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getGroup_2_2()); }
(rule__Attribute__Group_2_2__0)*
{ after(grammarAccess.getAttributeAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Attribute__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_2_2__0__Impl
	rule__Attribute__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getCommaKeyword_2_2_0()); }

	',' 

{ after(grammarAccess.getAttributeAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getOtherValuesAssignment_2_2_1()); }
(rule__Attribute__OtherValuesAssignment_2_2_1)
{ after(grammarAccess.getAttributeAccess().getOtherValuesAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Array__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group__0__Impl
	rule__Array__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getArrayAction_0()); }
(

)
{ after(grammarAccess.getArrayAccess().getArrayAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group__1__Impl
	rule__Array__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getArrayAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group__2__Impl
	rule__Array__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getGroup_2()); }
(rule__Array__Group_2__0)?
{ after(grammarAccess.getArrayAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getArrayAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Array__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group_2__0__Impl
	rule__Array__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getValueAssignment_2_0()); }
(rule__Array__ValueAssignment_2_0)
{ after(grammarAccess.getArrayAccess().getValueAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getGroup_2_1()); }
(rule__Array__Group_2_1__0)*
{ after(grammarAccess.getArrayAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Array__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group_2_1__0__Impl
	rule__Array__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getArrayAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getOtherValuesAssignment_2_1_1()); }
(rule__Array__OtherValuesAssignment_2_1_1)
{ after(grammarAccess.getArrayAccess().getOtherValuesAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Map__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Map__Group__0__Impl
	rule__Map__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getMapAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Map__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Map__Group__1__Impl
	rule__Map__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getMappingAssignment_1()); }
(rule__Map__MappingAssignment_1)
{ after(grammarAccess.getMapAccess().getMappingAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Map__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Map__Group__2__Impl
	rule__Map__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getGroup_2()); }
(rule__Map__Group_2__0)*
{ after(grammarAccess.getMapAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Map__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Map__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getMapAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Map__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Map__Group_2__0__Impl
	rule__Map__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getMapAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Map__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Map__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getOtherMappingAssignment_2_1()); }
(rule__Map__OtherMappingAssignment_2_1)
{ after(grammarAccess.getMapAccess().getOtherMappingAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Mapping__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__0__Impl
	rule__Mapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getIdAssignment_0()); }
(rule__Mapping__IdAssignment_0)
{ after(grammarAccess.getMappingAccess().getIdAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__1__Impl
	rule__Mapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getAssignAssignment_1()); }
(rule__Mapping__AssignAssignment_1)
{ after(grammarAccess.getMappingAccess().getAssignAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getValueAssignment_2()); }
(rule__Mapping__ValueAssignment_2)
{ after(grammarAccess.getMappingAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Id__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Id__Group_2__0__Impl
	rule__Id__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Id__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdAccess().getWORDTerminalRuleCall_2_0()); }
	RULE_WORD
{ after(grammarAccess.getIdAccess().getWORDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Id__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Id__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Id__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdAccess().getGroup_2_1()); }
(rule__Id__Group_2_1__0)*
{ after(grammarAccess.getIdAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Id__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Id__Group_2_1__0__Impl
	rule__Id__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Id__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdAccess().getFullStopKeyword_2_1_0()); }

	'.' 

{ after(grammarAccess.getIdAccess().getFullStopKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Id__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Id__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Id__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdAccess().getWORDTerminalRuleCall_2_1_1()); }
	RULE_WORD
{ after(grammarAccess.getIdAccess().getWORDTerminalRuleCall_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Dgs__HeaderAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDgsAccess().getHeaderHeaderParserRuleCall_0_0()); }
	ruleHeader{ after(grammarAccess.getDgsAccess().getHeaderHeaderParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dgs__EventAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDgsAccess().getEventEventParserRuleCall_1_0_0()); }
	ruleEvent{ after(grammarAccess.getDgsAccess().getEventEventParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dgs__CommentAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDgsAccess().getCommentCOMMENTTerminalRuleCall_1_1_0()); }
	RULE_COMMENT{ after(grammarAccess.getDgsAccess().getCommentCOMMENTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Header__MagicAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getMagicMAGICTerminalRuleCall_0_0()); }
	RULE_MAGIC{ after(grammarAccess.getHeaderAccess().getMagicMAGICTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Header__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getNameIdParserRuleCall_2_0()); }
	ruleId{ after(grammarAccess.getHeaderAccess().getNameIdParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Header__NumberOfStepsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getNumberOfStepsINTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getHeaderAccess().getNumberOfStepsINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Header__NumberOfEventsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getNumberOfEventsINTTerminalRuleCall_4_0()); }
	RULE_INT{ after(grammarAccess.getHeaderAccess().getNumberOfEventsINTTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__AnAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getAnAnParserRuleCall_0_0_0()); }
	ruleAn{ after(grammarAccess.getEventAccess().getAnAnParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__CnAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getCnCnParserRuleCall_0_1_0()); }
	ruleCn{ after(grammarAccess.getEventAccess().getCnCnParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__DnAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getDnDnParserRuleCall_0_2_0()); }
	ruleDn{ after(grammarAccess.getEventAccess().getDnDnParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__AeAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getAeAeParserRuleCall_0_3_0()); }
	ruleAe{ after(grammarAccess.getEventAccess().getAeAeParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__CeAssignment_0_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getCeCeParserRuleCall_0_4_0()); }
	ruleCe{ after(grammarAccess.getEventAccess().getCeCeParserRuleCall_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__DeAssignment_0_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getDeDeParserRuleCall_0_5_0()); }
	ruleDe{ after(grammarAccess.getEventAccess().getDeDeParserRuleCall_0_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__CgAssignment_0_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getCgCgParserRuleCall_0_6_0()); }
	ruleCg{ after(grammarAccess.getEventAccess().getCgCgParserRuleCall_0_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__StAssignment_0_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getStStParserRuleCall_0_7_0()); }
	ruleSt{ after(grammarAccess.getEventAccess().getStStParserRuleCall_0_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__ClAssignment_0_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getClClTerminalRuleCall_0_8_0()); }
	RULE_CL{ after(grammarAccess.getEventAccess().getClClTerminalRuleCall_0_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__CommentAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getCommentCOMMENTTerminalRuleCall_1_0_0()); }
	RULE_COMMENT{ after(grammarAccess.getEventAccess().getCommentCOMMENTTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__An__IdNodeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnAccess().getIdNodeIdParserRuleCall_1_0()); }
	ruleId{ after(grammarAccess.getAnAccess().getIdNodeIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__An__AttributesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnAccess().getAttributesAttributesParserRuleCall_2_0()); }
	ruleAttributes{ after(grammarAccess.getAnAccess().getAttributesAttributesParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cn__IdNodeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCnAccess().getIdNodeIdParserRuleCall_1_0()); }
	ruleId{ after(grammarAccess.getCnAccess().getIdNodeIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cn__AttributesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCnAccess().getAttributesAttributesParserRuleCall_2_0()); }
	ruleAttributes{ after(grammarAccess.getCnAccess().getAttributesAttributesParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dn__IdNodeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDnAccess().getIdNodeIdParserRuleCall_1_0()); }
	ruleId{ after(grammarAccess.getDnAccess().getIdNodeIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ae__IdEdgeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAeAccess().getIdEdgeIdParserRuleCall_1_0()); }
	ruleId{ after(grammarAccess.getAeAccess().getIdEdgeIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ae__IdNode1Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAeAccess().getIdNode1IdParserRuleCall_2_0()); }
	ruleId{ after(grammarAccess.getAeAccess().getIdNode1IdParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ae__DirectionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAeAccess().getDirectionDIRECTIONTerminalRuleCall_3_0()); }
	RULE_DIRECTION{ after(grammarAccess.getAeAccess().getDirectionDIRECTIONTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ae__IdNode2Assignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAeAccess().getIdNode2IdParserRuleCall_4_0()); }
	ruleId{ after(grammarAccess.getAeAccess().getIdNode2IdParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ae__AttributesAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAeAccess().getAttributesAttributesParserRuleCall_5_0()); }
	ruleAttributes{ after(grammarAccess.getAeAccess().getAttributesAttributesParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ce__IdEdgeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCeAccess().getIdEdgeIdParserRuleCall_1_0()); }
	ruleId{ after(grammarAccess.getCeAccess().getIdEdgeIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ce__AttributesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCeAccess().getAttributesAttributesParserRuleCall_2_0()); }
	ruleAttributes{ after(grammarAccess.getCeAccess().getAttributesAttributesParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__De__IdEdgeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeAccess().getIdEdgeIdParserRuleCall_1_0()); }
	ruleId{ after(grammarAccess.getDeAccess().getIdEdgeIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cg__AttributesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCgAccess().getAttributesAttributesParserRuleCall_1_0()); }
	ruleAttributes{ after(grammarAccess.getCgAccess().getAttributesAttributesParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__St__RealAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStAccess().getRealREALTerminalRuleCall_1_0()); }
	RULE_REAL{ after(grammarAccess.getStAccess().getRealREALTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__AttributeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributesAccess().getAttributeAttributeParserRuleCall_1_0()); }
	ruleAttribute{ after(grammarAccess.getAttributesAccess().getAttributeAttributeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getOperatorOPERATORTerminalRuleCall_0_0()); }
	RULE_OPERATOR{ after(grammarAccess.getAttributeAccess().getOperatorOPERATORTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__IdAttributeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getIdAttributeIdParserRuleCall_1_0()); }
	ruleId{ after(grammarAccess.getAttributeAccess().getIdAttributeIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__AssignAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getAssignASSIGNTerminalRuleCall_2_0_0()); }
	RULE_ASSIGN{ after(grammarAccess.getAttributeAccess().getAssignASSIGNTerminalRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getValueValueParserRuleCall_2_1_0()); }
	ruleValue{ after(grammarAccess.getAttributeAccess().getValueValueParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__OtherValuesAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getOtherValuesValueParserRuleCall_2_2_1_0()); }
	ruleValue{ after(grammarAccess.getAttributeAccess().getOtherValuesValueParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__StringAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getStringSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getValueAccess().getStringSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__RealAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getRealREALTerminalRuleCall_1_0()); }
	RULE_REAL{ after(grammarAccess.getValueAccess().getRealREALTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__IntAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getIntINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getValueAccess().getIntINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__ArrayAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getArrayArrayParserRuleCall_3_0()); }
	ruleArray{ after(grammarAccess.getValueAccess().getArrayArrayParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__MapAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getMapMapParserRuleCall_4_0()); }
	ruleMap{ after(grammarAccess.getValueAccess().getMapMapParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Array__ValueAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getValueValueParserRuleCall_2_0_0()); }
	ruleValue{ after(grammarAccess.getArrayAccess().getValueValueParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Array__OtherValuesAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getOtherValuesValueParserRuleCall_2_1_1_0()); }
	ruleValue{ after(grammarAccess.getArrayAccess().getOtherValuesValueParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Map__MappingAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getMappingMappingParserRuleCall_1_0()); }
	ruleMapping{ after(grammarAccess.getMapAccess().getMappingMappingParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Map__OtherMappingAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getOtherMappingMappingParserRuleCall_2_1_0()); }
	ruleMapping{ after(grammarAccess.getMapAccess().getOtherMappingMappingParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__IdAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getIdIdParserRuleCall_0_0()); }
	ruleId{ after(grammarAccess.getMappingAccess().getIdIdParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__AssignAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getAssignASSIGNTerminalRuleCall_1_0()); }
	RULE_ASSIGN{ after(grammarAccess.getMappingAccess().getAssignASSIGNTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getValueValueParserRuleCall_2_0()); }
	ruleValue{ after(grammarAccess.getMappingAccess().getValueValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_MAGIC : ('DGS003'|'DGS004');

RULE_CL : 'cl';

RULE_OPERATOR : ('+'|'-');

RULE_DIRECTION : ('<'|'>');

RULE_ASSIGN : ('='|':');

RULE_COMMENT : '#' ( options {greedy=false;} : . )*RULE_EOL;

RULE_INT : ('0'|'1'..'9' ('0'..'9')*);

RULE_REAL : RULE_INT ('.' '0'* RULE_INT)?;

RULE_WORD : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'-'|'_')*;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_EOL : '\r'? '\n';

RULE_WS : (' '|'\t')+;


